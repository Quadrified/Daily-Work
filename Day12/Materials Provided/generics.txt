Generics in Java:

Generics was added in Java 5 to provide compile-time type checking and removing risk of ClassCastException that was common while working with collection classes.
The entire collection framework was re-written to use generics for type-safety.

List list = new ArrayList();
list.add("abc");
list.add(5); //OK

for(Object obj : list){
	//type casting leading to ClassCastException at runtime
    String str=(String) obj; 
}

Example Using Generics:

List<String> list1 = new ArrayList<>(); 
list1.add("abc");
//list1.add(5); //compiler error

for(String str : list){
     //no type casting needed, avoids ClassCastException
	 String name=str;
}


Java Generic Class:
-------------------

We can define our own classes with generics type. A generic type is a class or interface that is parameterized over types. We use angle brackets (<>) to specify the type parameter.

Simple class Example:

public class WithoutGenerics {

	private Object t;

	public Object get() {
		return t;
	}

	public void set(Object t) {
		this.t = t;
	}

        public static void main(String args[]){
		WithoutGenerics type = new WithoutGenerics();
		type.set("Pankaj"); 
		String str = (String) type.get(); //type casting, error prone and can cause ClassCastException
	}
}
Notice:  while using this class, we have to use type casting and it can produce ClassCastException at runtime. Now we will use java generic class to rewrite the same class as shown below.



public class GenericsType<T> {

	private T t;
	
	public T get(){
		return this.t;
	}
	
	public void set(T t1){
		this.t=t1;
	}
	
	public static void main(String args[]){
		GenericsType<String> type = new GenericsType<>();
		type.set("Pankaj"); //valid
		String n = type.get();
		GenericsType type1 = new GenericsType(); //raw type
		type1.set("Pankaj"); //valid
		type1.set(10); //valid and autoboxing support
		GenericsType<Integer> type = new GenericsType<>();
	}
}

Java Generic Interface:
Comparable interface is an example of Generis interface.
import java.util.*;

public interface Comparable<T> {
    public int compareTo(T o);
}

Java Generic Type:

E – Element (used extensively by the Java Collections Framework, for example ArrayList, Set etc.)
K – Key (Used in Map)
N – Number
T – Type
V – Value (Used in Map)

